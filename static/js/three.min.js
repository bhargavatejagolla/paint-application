// three_scene.js â€” 3D animated background
window.addEventListener("DOMContentLoaded", () => {
  const container = document.getElementById("three-root");
  if (!container) return;

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  );
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setClearColor(0x000000, 0); // transparent background
  container.appendChild(renderer.domElement);

  // Add glowing spheres as ambient particles
  const geometry = new THREE.SphereGeometry(0.2, 32, 32);
  const material = new THREE.MeshStandardMaterial({
    color: 0x6699ff,
    emissive: 0x2244ff,
    emissiveIntensity: 0.6,
    transparent: true,
    opacity: 0.9,
  });

  const spheres = [];
  for (let i = 0; i < 20; i++) {
    const sphere = new THREE.Mesh(geometry, material.clone());
    sphere.position.set(
      (Math.random() - 0.5) * 20,
      (Math.random() - 0.5) * 10,
      (Math.random() - 0.5) * 10
    );
    sphere.material.color.setHSL(Math.random(), 0.6, 0.6);
    scene.add(sphere);
    spheres.push(sphere);
  }

  // Lighting
  const light = new THREE.PointLight(0xffffff, 1);
  light.position.set(0, 5, 10);
  scene.add(light);
  const ambient = new THREE.AmbientLight(0x888888);
  scene.add(ambient);

  camera.position.z = 8;

  // Animate spheres in soft wave motion
  function animate() {
    requestAnimationFrame(animate);
    spheres.forEach((s, i) => {
      s.position.y = Math.sin(Date.now() * 0.001 + i) * 1.5;
      s.rotation.x += 0.002;
      s.rotation.y += 0.003;
    });
    renderer.render(scene, camera);
  }

  animate();

  // Responsive resize
  window.addEventListener("resize", () => {
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
  });
});
